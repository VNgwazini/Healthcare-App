{"ast":null,"code":"var _jsxFileName = \"/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/BloodTypeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, IconButton, Tooltip, Typography } from '@material-ui/core';\nimport ErrorIcon from '@material-ui/icons/Error'; // props: bloodType and className only\n// state includes values received from the API, units and expired\n\nclass BloodTypeCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 0,\n      showAlert: false\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const currentDate = new Date();\n\n    const updateData = async id => {\n      axios({\n        method: 'PUT',\n        url: `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies/${id}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        data: {\n          usage: \"unassigned\"\n        }\n      }).then(response => {\n        console.log(response.data);\n      });\n    }; // if (this.props.bloodType == \"A+\") {\n    //   for (var i = 0; i < 1201; i+=100) {\n    //     var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?_start=${i}`\n    //     axios({\n    //       method: 'GET',\n    //       url: url,\n    //       headers: {\n    //         Authorization: `Bearer ${token}`\n    //       }\n    //     })\n    //     .then((response) => {\n    //       console.log(response.data.length);\n    //       for (var i in response.data) {\n    //         updateData(response.data[i].id);\n    //       }\n    //     })\n    //   }\n    // }\n\n\n    const getData = async () => {\n      var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?bloodBank.id=${user.bloodBank.id}&bloodDonor.bloodGroup=${this.props.bloodType}&expiration_gt=${currentDate.toISOString()}&usage=unassigned`; // encoding + in the URL\n\n      if (url.includes('+')) {\n        url = url.replace('+', '%2B');\n      }\n\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.setState({\n        units: response.data.length\n      }); // sets showAlert to true if some units are close to expiring\n\n      var almostExpired = false;\n      var thresholdDate = new Date();\n      const DAYS = 5; // the number of days before expiration when we want to alert\n\n      thresholdDate.setDate(thresholdDate.getDate() + DAYS);\n\n      for (const entry of response.data) {\n        const expDate = new Date(entry.expiration);\n\n        if (expDate < thresholdDate) {\n          almostExpired = true;\n          break;\n        }\n      }\n\n      this.setState({\n        showAlert: almostExpired\n      });\n    };\n\n    if (user) {\n      getData();\n    }\n  } // TODO: make cards clickable so they lead to the inventory page\n\n\n  render() {\n    const {\n      bloodType,\n      className,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: className,\n      variant: \"outlined\",\n      style: {\n        position: 'relative',\n        height: '100%'\n      }\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showAlert ? {\n        display: 'inline',\n        position: 'absolute',\n        top: 0,\n        right: 0\n      } : {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"top\",\n      title: this.state.showAlert ? \"Some units will expire in 5 days or less\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ErrorIcon, {\n      color: \"error\",\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      style: this.state.units > 1 ? {\n        color: '#3F51B5'\n      } : {\n        color: '#E53935'\n      },\n      variant: \"h3\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, bloodType), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, this.state.units, \" UNITS\")));\n  }\n\n}\n\n;\nBloodTypeCard.propTypes = {\n  bloodType: PropTypes.string,\n  className: PropTypes.string\n};\nexport default BloodTypeCard;","map":{"version":3,"sources":["/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/BloodTypeCard.js"],"names":["React","axios","PropTypes","Card","CardContent","IconButton","Tooltip","Typography","ErrorIcon","BloodTypeCard","Component","constructor","props","state","units","showAlert","componentDidMount","token","localStorage","getItem","user","JSON","parse","currentDate","Date","updateData","id","method","url","headers","Authorization","data","usage","then","response","console","log","getData","bloodBank","bloodType","toISOString","includes","replace","get","setState","length","almostExpired","thresholdDate","DAYS","setDate","getDate","entry","expDate","expiration","render","className","rest","position","height","display","top","right","color","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport ErrorIcon from '@material-ui/icons/Error';\n\n// props: bloodType and className only\n// state includes values received from the API, units and expired\nclass BloodTypeCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 0,\n      showAlert: false\n    }\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const currentDate = new Date();\n\n    const updateData = async (id) => {\n      axios({\n        method: 'PUT',\n        url: `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies/${id}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        data: { usage: \"unassigned\" }\n      })\n      .then((response) => {\n        console.log(response.data);\n      })   \n    }\n\n    // if (this.props.bloodType == \"A+\") {\n    //   for (var i = 0; i < 1201; i+=100) {\n    //     var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?_start=${i}`\n    //     axios({\n    //       method: 'GET',\n    //       url: url,\n    //       headers: {\n    //         Authorization: `Bearer ${token}`\n    //       }\n    //     })\n    //     .then((response) => {\n    //       console.log(response.data.length);\n    //       for (var i in response.data) {\n    //         updateData(response.data[i].id);\n    //       }\n    //     })\n    //   }\n    // }\n    \n    const getData = async () => {\n      var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?bloodBank.id=${user.bloodBank.id}&bloodDonor.bloodGroup=${this.props.bloodType}&expiration_gt=${currentDate.toISOString()}&usage=unassigned`;\n      // encoding + in the URL\n      if (url.includes('+')) {\n        url = url.replace('+', '%2B');\n      }\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      this.setState({\n        units: response.data.length\n      });\n      // sets showAlert to true if some units are close to expiring\n      var almostExpired = false;\n      var thresholdDate = new Date();\n      const DAYS = 5; // the number of days before expiration when we want to alert\n      thresholdDate.setDate(thresholdDate.getDate() + DAYS);\n      for (const entry of response.data) {\n        const expDate = new Date(entry.expiration);\n        if (expDate < thresholdDate) {\n          almostExpired = true;\n          break;\n        }\n      }\n      this.setState({\n        showAlert: almostExpired\n      });\n    }\n\n    if (user) {\n      getData();\n    }\n  }\n  \n  // TODO: make cards clickable so they lead to the inventory page\n  render() {\n    const {bloodType, className, ...rest} = this.props;\n    return (\n      <Card\n        className={className}\n        variant=\"outlined\"\n        style={{position: 'relative', height: '100%'}}\n        {...rest}\n      >\n        <div style={this.state.showAlert ? {display: 'inline', position: 'absolute', top: 0, right: 0} \n          : {display: 'none'}}>\n          <Tooltip placement=\"top\" title={this.state.showAlert ? \"Some units will expire in 5 days or less\" : \"\"}>\n            <IconButton>\n              <ErrorIcon color=\"error\" fontSize=\"small\"/>\n            </IconButton>\n          </Tooltip>\n        </div>\n        <CardContent>\n          <Typography\n            style={this.state.units > 1 ? {color: '#3F51B5'} : {color: '#E53935'}}\n            variant=\"h3\"\n            align=\"center\"\n          >\n            {bloodType}\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            align=\"center\"\n          >\n            {this.state.units} UNITS\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n};\n\nBloodTypeCard.propTypes = {\n  bloodType: PropTypes.string,\n  className: PropTypes.string\n};\n\nexport default BloodTypeCard;\n"]},"metadata":{},"sourceType":"module"}