{"ast":null,"code":"var _jsxFileName = \"/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/BloodTypeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, IconButton, Tooltip, Typography } from '@material-ui/core';\nimport ErrorIcon from '@material-ui/icons/Error'; // props: bloodType and className only\n// state includes values received from the API, units and expired\n\nclass BloodTypeCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 0,\n      showAlert: false\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const currentDate = new Date();\n\n    const getData = async () => {\n      var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?bloodBank.id=${user.bloodBank.id}&bloodDonor.bloodGroup=${this.props.bloodType}&expiration_gt=${currentDate.toISOString()}&usage=unassigned`; // encoding + in the URL\n\n      if (url.includes('+')) {\n        url = url.replace('+', '%2B');\n      }\n\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.setState({\n        units: response.data.length\n      }); // sets showAlert to true if some units are close to expiring\n\n      var almostExpired = false;\n      var thresholdDate = new Date();\n      const DAYS = 5; // the number of days before expiration when we want to alert\n\n      thresholdDate.setDate(thresholdDate.getDate() + DAYS);\n\n      for (const entry of response.data) {\n        const expDate = new Date(entry.expiration);\n\n        if (expDate < thresholdDate) {\n          almostExpired = true;\n          break;\n        }\n      }\n\n      this.setState({\n        showAlert: almostExpired\n      });\n    };\n\n    if (user) {\n      getData();\n    }\n  } // TODO: make cards clickable so they lead to the inventory page\n\n\n  render() {\n    const {\n      bloodType,\n      className,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: className,\n      variant: \"outlined\",\n      style: {\n        position: 'relative',\n        height: '100%'\n      }\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showAlert ? {\n        display: 'inline',\n        position: 'absolute',\n        top: 0,\n        right: 0\n      } : {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"top\",\n      title: this.state.showAlert ? \"Some units will expire in 5 days or less\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ErrorIcon, {\n      color: \"error\",\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      style: this.state.units > 1 ? {\n        color: '#3F51B5'\n      } : {\n        color: '#E53935'\n      },\n      variant: \"h3\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, bloodType), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, this.state.units, \" UNITS\")));\n  }\n\n}\n\n;\nBloodTypeCard.propTypes = {\n  bloodType: PropTypes.string,\n  className: PropTypes.string\n};\nexport default BloodTypeCard;","map":{"version":3,"sources":["/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/BloodTypeCard.js"],"names":["React","axios","PropTypes","Card","CardContent","IconButton","Tooltip","Typography","ErrorIcon","BloodTypeCard","Component","constructor","props","state","units","showAlert","componentDidMount","token","localStorage","getItem","user","JSON","parse","currentDate","Date","getData","url","bloodBank","id","bloodType","toISOString","includes","replace","response","get","headers","Authorization","setState","data","length","almostExpired","thresholdDate","DAYS","setDate","getDate","entry","expDate","expiration","render","className","rest","position","height","display","top","right","color","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport ErrorIcon from '@material-ui/icons/Error';\n\n// props: bloodType and className only\n// state includes values received from the API, units and expired\nclass BloodTypeCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      units: 0,\n      showAlert: false\n    }\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    const currentDate = new Date();\n    \n    const getData = async () => {\n      var url = `http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?bloodBank.id=${user.bloodBank.id}&bloodDonor.bloodGroup=${this.props.bloodType}&expiration_gt=${currentDate.toISOString()}&usage=unassigned`;\n      // encoding + in the URL\n      if (url.includes('+')) {\n        url = url.replace('+', '%2B');\n      }\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      this.setState({\n        units: response.data.length\n      });\n      // sets showAlert to true if some units are close to expiring\n      var almostExpired = false;\n      var thresholdDate = new Date();\n      const DAYS = 5; // the number of days before expiration when we want to alert\n      thresholdDate.setDate(thresholdDate.getDate() + DAYS);\n      for (const entry of response.data) {\n        const expDate = new Date(entry.expiration);\n        if (expDate < thresholdDate) {\n          almostExpired = true;\n          break;\n        }\n      }\n      this.setState({\n        showAlert: almostExpired\n      });\n    }\n\n    if (user) {\n      getData();\n    }\n  }\n  \n  // TODO: make cards clickable so they lead to the inventory page\n  render() {\n    const {bloodType, className, ...rest} = this.props;\n    return (\n      <Card\n        className={className}\n        variant=\"outlined\"\n        style={{position: 'relative', height: '100%'}}\n        {...rest}\n      >\n        <div style={this.state.showAlert ? {display: 'inline', position: 'absolute', top: 0, right: 0} \n          : {display: 'none'}}>\n          <Tooltip placement=\"top\" title={this.state.showAlert ? \"Some units will expire in 5 days or less\" : \"\"}>\n            <IconButton>\n              <ErrorIcon color=\"error\" fontSize=\"small\"/>\n            </IconButton>\n          </Tooltip>\n        </div>\n        <CardContent>\n          <Typography\n            style={this.state.units > 1 ? {color: '#3F51B5'} : {color: '#E53935'}}\n            variant=\"h3\"\n            align=\"center\"\n          >\n            {bloodType}\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            align=\"center\"\n          >\n            {this.state.units} UNITS\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n};\n\nBloodTypeCard.propTypes = {\n  bloodType: PropTypes.string,\n  className: PropTypes.string\n};\n\nexport default BloodTypeCard;\n"]},"metadata":{},"sourceType":"module"}