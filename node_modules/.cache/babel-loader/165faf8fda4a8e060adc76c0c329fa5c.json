{"ast":null,"code":"var _jsxFileName = \"/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/NetworkBloodSupply.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Bar } from 'react-chartjs-2';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, colors } from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nconst BLOODTYPES = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\nclass NetworkBloodSupply extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      network: [],\n      // per each blood type, has a list of each bank's inventory for that type\n      bloodbanks: [] // list of banks' names\n\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    const getData = async () => {\n      const responseBanks = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodbanks?id_ne=${user.bloodBank.id}&_limit=5`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      var bankNames = [];\n      var bankIds = [];\n\n      for (var bank of responseBanks.data) {\n        bankNames.push(bank.name);\n        bankIds.push(bank.id);\n      }\n\n      this.setState({\n        bloodbanks: bankNames\n      });\n      const responseCount = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies/count`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const totalCount = responseCount.data; //get ALL supplies (have to loop bc of strapi GET limit = 100)\n\n      const currentDate = new Date();\n      var supplies = [];\n\n      for (var i = 0; i < totalCount / 100; i++) {\n        const start = 100 * i;\n        const response = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?expiration_gt=${currentDate.toISOString()}&usage=unassigned&_start=${start}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        supplies = supplies.concat(response.data);\n      }\n\n      var row;\n\n      for (var type of BLOODTYPES) {\n        row = [];\n\n        for (var id of bankIds) {\n          var result = supplies.filter(unit => unit.bloodDonor.bloodGroup === type && unit.bloodBank.id === id);\n          row.push(result.length);\n        }\n\n        var temp = this.state.network;\n        temp.push(row);\n        this.setState({\n          network: temp\n        });\n      }\n    };\n\n    if (user) {\n      getData();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      ...rest\n    } = this.props;\n    const data = {\n      datasets: [{\n        backgroundColor: colors.red[600],\n        data: this.state.network[0],\n        label: 'A+'\n      }, {\n        backgroundColor: colors.orange[600],\n        data: this.state.network[1],\n        label: 'A-'\n      }, {\n        backgroundColor: colors.yellow[600],\n        data: this.state.network[2],\n        label: 'B+'\n      }, {\n        backgroundColor: colors.green[600],\n        data: this.state.network[3],\n        label: 'B-'\n      }, {\n        backgroundColor: colors.teal[600],\n        data: this.state.network[4],\n        label: 'AB+'\n      }, {\n        backgroundColor: colors.blue[600],\n        data: this.state.network[5],\n        label: 'AB-'\n      }, {\n        backgroundColor: colors.indigo[600],\n        data: this.state.network[6],\n        label: 'O+'\n      }, {\n        backgroundColor: colors.purple[600],\n        data: this.state.network[7],\n        label: 'O-'\n      }],\n      labels: this.state.bloodbanks\n    };\n    const options = {\n      animation: false,\n      cornerRadius: 20,\n      layout: {\n        padding: 0\n      },\n      legend: {\n        display: false\n      },\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [{\n          barThickness: 12,\n          maxBarThickness: 10,\n          barPercentage: 0.5,\n          categoryPercentage: 0.5,\n          gridLines: {\n            display: false,\n            drawBorder: false\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            beginAtZero: true,\n            min: 0\n          },\n          gridLines: {\n            borderDash: [2],\n            borderDashOffset: [2],\n            drawBorder: false,\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2]\n          }\n        }]\n      },\n      tooltips: {\n        borderWidth: 1,\n        enabled: true,\n        intersect: false,\n        mode: 'index'\n      }\n    };\n    var isLoaded = false;\n\n    for (var obj of data[\"datasets\"]) {\n      if (obj[\"data\"]) {\n        for (var entry of obj[\"data\"]) {\n          if (!entry) {\n            isLoaded = false;\n          } else {\n            isLoaded = true;\n          }\n        }\n      } else {\n        isLoaded = false;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: className\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(CardHeader, {\n      title: \"Network Blood Supply\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/static/loading.gif\",\n      alt: \"Loading...\",\n      style: isLoaded ? {\n        display: \"none\"\n      } : {\n        display: \"block\",\n        margin: \"auto\",\n        height: \"400px\",\n        width: \"50%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      height: 400,\n      position: \"relative\",\n      style: isLoaded ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      endIcon: /*#__PURE__*/React.createElement(ArrowRightIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 22\n        }\n      }),\n      size: \"small\",\n      variant: \"text\",\n      href: \"http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:3000/app/manage_requests\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }, \"Make a request\")));\n  }\n\n}\n\n;\nNetworkBloodSupply.propTypes = {\n  className: PropTypes.string\n};\nexport default NetworkBloodSupply;","map":{"version":3,"sources":["/home/vusa/Wala_Digital/dashboard/src/views/reports/DashboardView/NetworkBloodSupply.js"],"names":["React","axios","PropTypes","Bar","Box","Button","Card","CardContent","CardHeader","Divider","colors","ArrowRightIcon","BLOODTYPES","NetworkBloodSupply","Component","constructor","props","state","network","bloodbanks","componentDidMount","token","localStorage","getItem","user","JSON","parse","getData","responseBanks","get","bloodBank","id","headers","Authorization","bankNames","bankIds","bank","data","push","name","setState","responseCount","totalCount","currentDate","Date","supplies","i","start","response","toISOString","concat","row","type","result","filter","unit","bloodDonor","bloodGroup","length","temp","render","className","rest","datasets","backgroundColor","red","label","orange","yellow","green","teal","blue","indigo","purple","labels","options","animation","cornerRadius","layout","padding","legend","display","maintainAspectRatio","responsive","scales","xAxes","barThickness","maxBarThickness","barPercentage","categoryPercentage","gridLines","drawBorder","yAxes","ticks","beginAtZero","min","borderDash","borderDashOffset","zeroLineBorderDash","zeroLineBorderDashOffset","tooltips","borderWidth","enabled","intersect","mode","isLoaded","obj","entry","margin","height","width","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  colors\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\nconst BLOODTYPES = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\nclass NetworkBloodSupply extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      network: [], // per each blood type, has a list of each bank's inventory for that type\n      bloodbanks: [] // list of banks' names\n    }\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    const getData = async () => {\n      const responseBanks = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodbanks?id_ne=${user.bloodBank.id}&_limit=5`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      var bankNames = [];\n      var bankIds = [];\n      for (var bank of responseBanks.data) {\n        bankNames.push(bank.name);\n        bankIds.push(bank.id);\n      }\n      this.setState({\n        bloodbanks: bankNames\n      });\n\n      const responseCount = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies/count`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      const totalCount = responseCount.data;\n  \n      //get ALL supplies (have to loop bc of strapi GET limit = 100)\n      const currentDate = new Date();\n      var supplies = [];\n      for (var i = 0; i < totalCount/100; i++) {\n        const start = 100 * i;\n        const response = await axios.get(`http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:1337/bloodsupplies?expiration_gt=${currentDate.toISOString()}&usage=unassigned&_start=${start}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        supplies = supplies.concat(response.data);\n      }\n\n      var row;\n      for (var type of BLOODTYPES) {\n        row = [];\n        for (var id of bankIds) {\n          var result = supplies.filter(unit => unit.bloodDonor.bloodGroup === type && unit.bloodBank.id === id);\n          row.push(result.length);\n        }\n        var temp = this.state.network;\n        temp.push(row);\n        this.setState({\n          network: temp\n        });\n      }\n    }\n\n    if (user) {\n      getData();\n    }\n  }\n\n  render() {\n    const {className, ...rest} = this.props;\n\n    const data = {\n      datasets: [\n        {\n          backgroundColor: colors.red[600],\n          data: this.state.network[0],\n          label: 'A+'\n        },\n        {\n          backgroundColor: colors.orange[600],\n          data: this.state.network[1],\n          label: 'A-'\n        },\n        {\n          backgroundColor: colors.yellow[600],\n          data: this.state.network[2],\n          label: 'B+'\n        },\n        {\n          backgroundColor: colors.green[600],\n          data: this.state.network[3],\n          label: 'B-'\n        },\n        {\n          backgroundColor: colors.teal[600],\n          data: this.state.network[4],\n          label: 'AB+'\n        },\n        {\n          backgroundColor: colors.blue[600],\n          data: this.state.network[5],\n          label: 'AB-'\n        },\n        {\n          backgroundColor: colors.indigo[600],\n          data: this.state.network[6],\n          label: 'O+'\n        },\n        {\n          backgroundColor: colors.purple[600],\n          data: this.state.network[7],\n          label: 'O-'\n        }\n      ],\n      labels: this.state.bloodbanks\n    };\n  \n    const options = {\n      animation: false,\n      cornerRadius: 20,\n      layout: { padding: 0 },\n      legend: { display: false },\n      maintainAspectRatio: false,\n      responsive: true,\n      scales: {\n        xAxes: [\n          {\n            barThickness: 12,\n            maxBarThickness: 10,\n            barPercentage: 0.5,\n            categoryPercentage: 0.5,\n            gridLines: {\n              display: false,\n              drawBorder: false\n            }\n          }\n        ],\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true,\n              min: 0\n            },\n            gridLines: {\n              borderDash: [2],\n              borderDashOffset: [2],\n              drawBorder: false,\n              zeroLineBorderDash: [2],\n              zeroLineBorderDashOffset: [2],\n            }\n          }\n        ]\n      },\n      tooltips: {\n        borderWidth: 1,\n        enabled: true,\n        intersect: false,\n        mode: 'index',\n      }\n    };\n\n    var isLoaded = false;\n    for (var obj of data[\"datasets\"]) {\n      if (obj[\"data\"]) {\n        for (var entry of obj[\"data\"]) {\n          if (!entry) {\n            isLoaded = false;\n          }\n          else {\n            isLoaded = true;\n          }\n        }\n      }\n      else {\n        isLoaded = false;\n      }\n    }\n  \n    return (\n      <Card\n        className={className}\n        {...rest}\n      >\n        <CardHeader\n          title=\"Network Blood Supply\"\n        />\n        <Divider />\n        <CardContent>\n          <img src=\"/static/loading.gif\" alt=\"Loading...\"\n              style={isLoaded ? {display: \"none\"} : {display: \"block\", margin: \"auto\", height: \"400px\", width: \"50%\"}}/>\n          <Box\n            height={400}\n            position=\"relative\"\n            style={isLoaded ? {display: \"block\"} : {display: \"none\"}}\n          >\n            <Bar\n              data={data}\n              options={options}\n            />\n          </Box>\n        </CardContent>\n        <Divider />\n        <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n          <Button\n            color=\"primary\"\n            endIcon={<ArrowRightIcon />}\n            size=\"small\"\n            variant=\"text\"\n            href=\"http://ec2-35-180-116-27.eu-west-3.compute.amazonaws.com:3000/app/manage_requests\"\n          >\n            Make a request\n          </Button>\n        </Box>\n      </Card>\n    );\n  }\n};\n\nNetworkBloodSupply.propTypes = {\n  className: PropTypes.string\n};\n\nexport default NetworkBloodSupply;\n"]},"metadata":{},"sourceType":"module"}