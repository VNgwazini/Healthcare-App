{"ast":null,"code":"var _jsxFileName = \"/home/vusa/Wala_Digital/dashboard/src/views/product/ManageInventoryListView/Donations.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Button, Box, Card, Chip, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormGroup, Grid, InputLabel, List, ListItem, ListItemText, Select, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, TextField, makeStyles } from '@material-ui/core';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport moment from 'moment';\nimport axios from 'axios';\nconst token = localStorage.jwt;\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  formControl: {},\n  selectField: {\n    width: \"200px\"\n  },\n  textField: {\n    width: \"200px\"\n  }\n}));\n\nconst Donations = ({\n  className,\n  bloodUnits,\n  donors,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n  const [open, setOpen] = React.useState(false);\n  const [openInfo, setOpenInfo] = React.useState(false);\n  const [reqInfo, setReqInfo] = React.useState('');\n  const [state, setState] = React.useState('');\n  const [curDonor, setCurDonor] = React.useState('');\n\n  function makeUnit(donorId, bankId, user, usage) {\n    axios({\n      method: 'POST',\n      url: 'http://localhost:1337/bloodsupplies',\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        bloodDonor: donorId,\n        bloodBank: bankId,\n        expiration: `${moment(new Date().setHours(new Date().getHours() + 24 * 45))}`,\n        user: user,\n        usage: usage\n      }\n    }) //handle success\n    .then(response => {\n      return response.data;\n    }) //handle error\n    .catch(error => {\n      return error;\n    });\n  }\n\n  const resetSelectedIDs = () => {\n    setSelectedCustomerIds([]);\n  };\n\n  const handleChange = event => {\n    setState(event.target.value);\n  };\n\n  const handleDonorChange = event => {\n    // since the \"value\" of the donor field in the form\n    // is the index of the donor in the donors list passed in:\n    setCurDonor(donors[event.target.value]);\n  };\n\n  const handleClickOpen = (event, id) => {\n    handleSelectOne(event, id);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setCurDonor('');\n    resetSelectedIDs();\n  };\n\n  const handleSubmit = props => {\n    let formData = new FormData(document.getElementById(\"updateMultiple\"));\n    const donorIndex = formData.get(\"donorIndex\");\n    var expirationDate;\n\n    if (formData.get(\"expiration\")) {\n      expirationDate = new Date(formData.get(\"expiration\"));\n      expirationDate.setDate(expirationDate.getDate() + 1);\n    }\n\n    const usage = formData.get(\"usage\");\n    var object = {};\n\n    if (donorIndex) {\n      object[\"bloodDonor\"] = donors[donorIndex];\n    }\n\n    if (expirationDate) {\n      object[\"expiration\"] = expirationDate.toISOString();\n    }\n\n    if (usage) {\n      object[\"usage\"] = usage;\n    }\n\n    console.log(object);\n\n    for (let i in selectedCustomerIds) {\n      axios({\n        method: 'PUT',\n        url: `http://localhost:1337/bloodsupplies/${selectedCustomerIds[i]}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        data: object\n      }) //handle success\n      .then(response => {\n        console.log(response.data);\n        handleClose();\n        setCurDonor('');\n        window.location.reload();\n      }) //handle error\n      .catch(error => console.error(`Error: ${error}`));\n    }\n  };\n\n  const handleSelectAll = event => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = bloodUnits.map(customer => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, selectedIndex), selectedCustomerIds.slice(selectedIndex + 1));\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n    console.log('Selected IDs: ', newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleClickOpenInfo = (event, bloodUnit) => {\n    handleSelectOne(event, bloodUnit.id);\n\n    if (bloodUnit.bloodRequest) {\n      axios({\n        method: 'GET',\n        url: `http://localhost:1337/bloodbanks/${bloodUnit.bloodRequest.requestor}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }) //handle success\n      .then(response => {\n        var temp = {\n          requestor: response.data.name,\n          id: bloodUnit.bloodRequest.id,\n          deliveryMethod: bloodUnit.bloodRequest.deliveryMethod,\n          status: bloodUnit.bloodRequest.status\n        };\n        setReqInfo(temp);\n        setOpenInfo(true);\n      }) //handle error\n      .catch(error => console.error(`Error: ${error}`));\n    } else {\n      setReqInfo('');\n      setOpenInfo(true);\n    }\n  };\n\n  const handleCloseInfo = () => {\n    setOpenInfo(false);\n    resetSelectedIDs();\n  };\n\n  const displayTable = bloodUnits => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n      my: 3,\n      mx: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      encType: \"multipart/form-data\",\n      onSubmit: handleSubmit,\n      method: \"post\",\n      id: \"updateMultiple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      id: \"updateForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, \"Update Donation\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }, \"To update a request, please enter the updated information here.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 80\n      }\n    }), \"To reserve units for internal use only, select \\\"internal\\\" in the usage field.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 94\n      }\n    }), \"Only fill out the fields that you want to update.\"), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"donorIndex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, \"NEW Donor\"), /*#__PURE__*/React.createElement(Select, {\n      native: true,\n      onChange: handleDonorChange,\n      className: classes.selectField,\n      inputProps: {\n        name: 'donorIndex',\n        id: 'donorIndex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      \"aria-label\": \"None\",\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 23\n      }\n    }), donors.map((donor, index) => /*#__PURE__*/React.createElement(\"option\", {\n      value: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 25\n      }\n    }, donor.firstName + \" \" + donor.lastName))))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      label: \"NEW Donor's Blood Group\",\n      value: curDonor.bloodGroup,\n      className: classes.textField,\n      InputLabelProps: {\n        shrink: true\n      },\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"expiration\",\n      label: \"NEW Expiration Date\",\n      name: \"expiration\",\n      type: \"date\",\n      value: state.expiration,\n      onChange: handleChange,\n      className: classes.textField,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"usage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }\n    }, \"NEW Usage\"), /*#__PURE__*/React.createElement(Select, {\n      native: true,\n      onChange: handleChange,\n      className: classes.selectField,\n      inputProps: {\n        name: 'usage',\n        id: 'usage'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      \"aria-label\": \"None\",\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"internal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 23\n      }\n    }, \"internal\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"unassigned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 23\n      }\n    }, \"unassigned\")))))), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: handleClose,\n      color: \"primary\",\n      form: \"updateForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: handleSubmit,\n      color: \"primary\",\n      type: \"submit\",\n      form: \"updateForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 15\n      }\n    }, \"Submit\")))))), /*#__PURE__*/React.createElement(Box, {\n      my: 3,\n      mx: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: openInfo,\n      onClose: handleCloseInfo,\n      \"aria-labelledby\": \"requestInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }\n    }, \"Assigned Request Info\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Request ID\",\n      secondary: reqInfo ? reqInfo.id.slice(17) : \"N/A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Requestor\",\n      secondary: reqInfo ? reqInfo.requestor : \"N/A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Delivery Method\",\n      secondary: reqInfo ? reqInfo.deliveryMethod : \"N/A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Status\",\n      secondary: reqInfo ? reqInfo.status : \"N/A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }\n    })))))), /*#__PURE__*/React.createElement(Table, {\n      style: {\n        width: \"101%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }\n    }, \"Action\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 13\n      }\n    }, \"Blood Group\"), /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        width: \"9%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }\n    }, \"Donation Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }\n    }, \"Expiration Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }\n    }, \"Donor\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }\n    }, \"Previous Transfusions\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    }, \"Previous Reactions\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    }, \"Usage\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }, \"Unit ID\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }\n    }, \"Request Info\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }\n    }, bloodUnits.slice(page * limit, page * limit + limit).map(bloodUnit => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      key: bloodUnit.id,\n      selected: selectedCustomerIds.indexOf(bloodUnit.id) !== -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      icon: /*#__PURE__*/React.createElement(UpdateIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 25\n        }\n      }),\n      label: bloodUnit.usage != \"external\" ? \"Update\" : \"Used\",\n      color: bloodUnit.usage != \"external\" ? \"primary\" : \"default\",\n      onClick: event => {\n        handleClickOpen(event, bloodUnit.id);\n      },\n      disabled: bloodUnit.usage == \"external\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 15\n      }\n    }, bloodUnit.bloodDonor.bloodGroup), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    }, moment(bloodUnit.createdAt).format('ll')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 15\n      }\n    }, moment(bloodUnit.expiration).format('ll')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 15\n      }\n    }, bloodUnit.bloodDonor.firstName + \" \" + bloodUnit.bloodDonor.lastName), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 15\n      }\n    }, bloodUnit.bloodDonor.previousTransfusions), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 15\n      }\n    }, bloodUnit.bloodDonor.previousReactions), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      color: \"default\",\n      label: bloodUnit.usage,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 15\n      }\n    }, bloodUnit.id.slice(17)), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      icon: /*#__PURE__*/React.createElement(InfoIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 25\n        }\n      }),\n      label: bloodUnit.bloodRequest ? \"Info\" : \"N/A\",\n      color: bloodUnit.bloodRequest ? \"primary\" : \"default\",\n      onClick: event => {\n        handleClickOpenInfo(event, bloodUnit);\n      },\n      disabled: !bloodUnit.bloodRequest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }\n    }))))))));\n  };\n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    minWidth: 1050,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  }, displayTable(bloodUnits))), /*#__PURE__*/React.createElement(TablePagination, {\n    component: \"div\",\n    count: bloodUnits.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleLimitChange,\n    page: page,\n    rowsPerPage: limit,\n    rowsPerPageOptions: [5, 10, 25, 50, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }));\n};\n\nDonations.propTypes = {\n  className: PropTypes.string\n};\nexport function mockGET(path, id) {\n  axios({\n    method: 'GET',\n    url: `http://localhost:1337/${path}?id=${id}`,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }) //handle success\n  .then(response => {\n    return response.data;\n  }) //handle error\n  .catch(error => {\n    return error;\n  });\n}\nexport default Donations;","map":{"version":3,"sources":["/home/vusa/Wala_Digital/dashboard/src/views/product/ManageInventoryListView/Donations.js"],"names":["React","useState","clsx","PropTypes","PerfectScrollbar","Button","Box","Card","Chip","Checkbox","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","FormGroup","Grid","InputLabel","List","ListItem","ListItemText","Select","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TextField","makeStyles","UpdateIcon","InfoIcon","FormControlLabel","moment","axios","token","localStorage","jwt","useStyles","theme","root","avatar","marginRight","spacing","formControl","selectField","width","textField","Donations","className","bloodUnits","donors","rest","classes","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","open","setOpen","openInfo","setOpenInfo","reqInfo","setReqInfo","state","setState","curDonor","setCurDonor","makeUnit","donorId","bankId","user","usage","method","url","headers","Authorization","data","bloodDonor","bloodBank","expiration","Date","setHours","getHours","then","response","catch","error","resetSelectedIDs","handleChange","event","target","value","handleDonorChange","handleClickOpen","id","handleSelectOne","handleClose","handleSubmit","props","formData","FormData","document","getElementById","donorIndex","get","expirationDate","setDate","getDate","object","toISOString","console","log","i","window","location","reload","handleSelectAll","newSelectedCustomerIds","checked","map","customer","selectedIndex","indexOf","concat","slice","length","handleLimitChange","handlePageChange","newPage","handleClickOpenInfo","bloodUnit","bloodRequest","requestor","temp","name","deliveryMethod","status","handleCloseInfo","displayTable","donor","index","firstName","lastName","bloodGroup","shrink","textAlign","createdAt","format","previousTransfusions","previousReactions","propTypes","string","mockGET","path"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Button,\n  Box,\n  Card,\n  Chip,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  FormControl,\n  FormGroup,\n  Grid,\n  InputLabel,\n  List,\n  ListItem,\n  ListItemText,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  makeStyles,\n} from '@material-ui/core';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport moment from 'moment';\n\nimport axios from 'axios';\n\nconst token = localStorage.jwt;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }, \n  formControl: {},\n  selectField: {\n    width: \"200px\"\n  },\n  textField: {\n    width: \"200px\"\n  }\n}));\n\nconst Donations = ({ className, bloodUnits, donors, ...rest }) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n  const [open, setOpen] = React.useState(false);\n\n  const [openInfo, setOpenInfo] = React.useState(false);\n  const [reqInfo, setReqInfo] = React.useState(''); \n\n  const [state, setState] = React.useState('');\n  const [curDonor, setCurDonor] = React.useState('');\n\n  function makeUnit(donorId, bankId, user, usage){\n    axios({\n      method: 'POST',\n      url: 'http://localhost:1337/bloodsupplies',\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        bloodDonor : donorId,\n        bloodBank : bankId,\n        expiration : `${moment(new Date().setHours(new Date().getHours() + (24*45)))}`,\n        user: user,\n        usage: usage\n      }\n    })\n    //handle success\n    .then((response) => {\n      return response.data\n    })\n    //handle error\n    .catch(error => {\n      return error\n    });\n  }\n\n  const resetSelectedIDs = () => {\n    setSelectedCustomerIds([]);\n  }\n  \n  const handleChange = (event) => {\n    setState(event.target.value);\n  };\n\n  const handleDonorChange = (event) => {\n    // since the \"value\" of the donor field in the form\n    // is the index of the donor in the donors list passed in:\n    setCurDonor(donors[event.target.value]);\n  }\n\n  const handleClickOpen = (event, id) => {\n    handleSelectOne(event,id);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setCurDonor('');\n    resetSelectedIDs();\n  };\n\n  const handleSubmit = (props) => {\n    let formData =  new FormData(document.getElementById(\"updateMultiple\"));\n\n    const donorIndex = formData.get(\"donorIndex\");\n    var expirationDate;\n    if (formData.get(\"expiration\")) {\n      expirationDate = new Date(formData.get(\"expiration\"));\n      expirationDate.setDate(expirationDate.getDate() + 1);\n    }\n    const usage = formData.get(\"usage\");\n\n    var object = {}\n    if (donorIndex) {object[\"bloodDonor\"] = donors[donorIndex]}\n    if (expirationDate) {object[\"expiration\"] = expirationDate.toISOString()}\n    if (usage) {object[\"usage\"] = usage}\n    console.log(object);\n\n    for(let i in selectedCustomerIds){\n      axios({\n        method: 'PUT',\n        url: `http://localhost:1337/bloodsupplies/${selectedCustomerIds[i]}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        data: object\n      })\n      //handle success\n      .then((response) => {\n        console.log(response.data);\n        handleClose();      \n        setCurDonor('');\n        window.location.reload();\n      })\n      //handle error\n      .catch(error => console.error(`Error: ${error}`));\n    }\n  };\n\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = bloodUnits.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n    console.log('Selected IDs: ', newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleClickOpenInfo = (event, bloodUnit) => {\n    handleSelectOne(event, bloodUnit.id);\n    if (bloodUnit.bloodRequest) {\n      axios({\n        method: 'GET',\n        url: `http://localhost:1337/bloodbanks/${bloodUnit.bloodRequest.requestor}`,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n      //handle success\n      .then((response) => {\n        var temp = {\n          requestor: response.data.name,\n          id: bloodUnit.bloodRequest.id,\n          deliveryMethod: bloodUnit.bloodRequest.deliveryMethod,\n          status: bloodUnit.bloodRequest.status\n        }\n        setReqInfo(temp);\n        setOpenInfo(true);\n      })\n      //handle error\n      .catch(error => console.error(`Error: ${error}`));\n    }\n    else {\n      setReqInfo('')\n      setOpenInfo(true);\n    }\n  };\n\n  const handleCloseInfo = () => {\n    setOpenInfo(false);\n    resetSelectedIDs();\n  };\n\n  const displayTable = (bloodUnits) => {\n    return (\n      <>\n      <Box my={3} mx={3}>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <form encType=\"multipart/form-data\" onSubmit={handleSubmit}  method=\"post\" id=\"updateMultiple\">\n          <FormGroup id=\"updateForm\">\n            <DialogTitle id=\"form-dialog-title\">Update Donation</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                To update a request, please enter the updated information here.<br/>\n                To reserve units for internal use only, select \"internal\" in the usage field.<br/>\n                Only fill out the fields that you want to update.\n              </DialogContentText>\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"donorIndex\">NEW Donor</InputLabel>\n                    <Select\n                      native\n                      onChange={handleDonorChange}\n                      className={classes.selectField}\n                      inputProps={{\n                        name: 'donorIndex',\n                        id: 'donorIndex',\n                      }}\n                    >\n                      <option aria-label=\"None\" value=\"\" />\n                      {donors.map((donor, index) => \n                        <option value={index}>{donor.firstName + \" \" + donor.lastName}</option>\n                      )}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                  <FormControl className={classes.formControl}>\n                    <TextField\n                      label=\"NEW Donor's Blood Group\"\n                      value={curDonor.bloodGroup}\n                      className={classes.textField}\n                      InputLabelProps={{\n                        shrink: true\n                      }}\n                      disabled\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                  <FormControl className={classes.formControl}>\n                    <TextField\n                      id=\"expiration\"\n                      label=\"NEW Expiration Date\"\n                      name=\"expiration\"\n                      type=\"date\"\n                      value={state.expiration}\n                      onChange={handleChange}\n                      className={classes.textField}\n                      InputLabelProps={{\n                        shrink: true\n                      }}\n                    />\n                  </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor=\"usage\">NEW Usage</InputLabel>\n                    <Select\n                      native\n                      onChange={handleChange}\n                      className={classes.selectField}\n                      inputProps={{\n                        name: 'usage',\n                        id: 'usage',\n                      }}\n                    >\n                      <option aria-label=\"None\" value=\"\" />\n                      <option value=\"internal\">internal</option>\n                      <option value=\"unassigned\">unassigned</option>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\" form=\"updateForm\">\n                Cancel\n              </Button>\n              <Button onClick={handleSubmit} color=\"primary\" type=\"submit\" form=\"updateForm\">\n                Submit\n              </Button>\n            </DialogActions>\n          </FormGroup>\n        </form>\n        </Dialog>\n      </Box>\n      <Box my={3} mx={3}>\n        <Dialog open={openInfo} onClose={handleCloseInfo} aria-labelledby=\"requestInfo\">\n          <DialogTitle id=\"form-dialog-title\">Assigned Request Info</DialogTitle>\n          <DialogContent>\n            <List>\n              <ListItem>\n                <ListItemText primary=\"Request ID\" secondary={reqInfo ? reqInfo.id.slice(17) : \"N/A\"}/>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"Requestor\" secondary={reqInfo ? reqInfo.requestor : \"N/A\"}/>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"Delivery Method\" secondary={reqInfo ? reqInfo.deliveryMethod : \"N/A\"}/>\n              </ListItem>\n              <ListItem>\n                <ListItemText primary=\"Status\" secondary={reqInfo ? reqInfo.status : \"N/A\"}/>\n              </ListItem>\n            </List>\n          </DialogContent>  \n        </Dialog>\n      </Box>\n      <Table style={{width: \"101%\"}}>\n      <TableHead>\n          <TableRow>\n            <TableCell style={{textAlign: \"center\"}}>\n            Action\n            </TableCell>\n            <TableCell>\n            Blood Group\n            </TableCell>\n            <TableCell style={{width: \"9%\"}}>\n            Donation Date\n            </TableCell>\n            <TableCell>\n            Expiration Date\n            </TableCell>\n            <TableCell>\n            Donor\n            </TableCell>\n            <TableCell>\n            Previous Transfusions\n            </TableCell>\n            <TableCell>\n            Previous Reactions\n            </TableCell>\n            <TableCell>\n            Usage\n            </TableCell>\n            <TableCell>\n            Unit ID\n            </TableCell>\n            <TableCell>\n            Request Info\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {bloodUnits\n        .slice(page * limit, page * limit + limit)\n        .map((bloodUnit) => (\n          <>\n            <TableRow\n              hover\n              key={bloodUnit.id}\n              selected={selectedCustomerIds.indexOf(bloodUnit.id) !== -1}\n            >\n              <TableCell style={{textAlign: \"center\"}}>\n                <Chip \n                  icon={<UpdateIcon />} \n                  label={bloodUnit.usage!=\"external\" ? \"Update\" : \"Used\"}\n                  color={bloodUnit.usage!=\"external\" ? \"primary\" : \"default\"}\n                  onClick={(event) => {handleClickOpen(event,bloodUnit.id)}}\n                  disabled={bloodUnit.usage == \"external\"}\n                />\n              </TableCell>\n              <TableCell>\n                {bloodUnit.bloodDonor.bloodGroup}\n              </TableCell>\n              <TableCell>\n                {moment(bloodUnit.createdAt).format('ll')}\n              </TableCell>\n              <TableCell>\n                {moment(bloodUnit.expiration).format('ll')}\n              </TableCell>\n              <TableCell>\n                {bloodUnit.bloodDonor.firstName + \" \" + bloodUnit.bloodDonor.lastName}\n              </TableCell>\n              <TableCell>\n                {bloodUnit.bloodDonor.previousTransfusions}\n              </TableCell>\n              <TableCell>\n                {bloodUnit.bloodDonor.previousReactions}\n              </TableCell>\n              <TableCell>\n                <Chip\n                  color=\"default\"\n                  label={bloodUnit.usage}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>\n                {bloodUnit.id.slice(17)}\n              </TableCell>\n              <TableCell>\n                <Chip \n                  icon={<InfoIcon />} \n                  label={bloodUnit.bloodRequest ? \"Info\" : \"N/A\"}\n                  color={bloodUnit.bloodRequest ? \"primary\" : \"default\"}\n                  onClick={(event) => {handleClickOpenInfo(event, bloodUnit)}}\n                  disabled={!bloodUnit.bloodRequest}\n                />\n              </TableCell>\n            </TableRow>\n            </>\n          ))}\n        </TableBody>\n      </Table>\n      </>\n    )\n  }\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n          {displayTable(bloodUnits)}\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={bloodUnits.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n      />\n    </Card>\n  );\n};\n\nDonations.propTypes = {\n  className: PropTypes.string,\n};\n\nexport function mockGET(path,id){\n  axios({\n    method: 'GET',\n    url: `http://localhost:1337/${path}?id=${id}`,\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n  //handle success\n  .then((response) => {\n    return response.data\n  })\n  //handle error\n  .catch(error => {\n    return error\n  });\n}\n\nexport default Donations;"]},"metadata":{},"sourceType":"module"}