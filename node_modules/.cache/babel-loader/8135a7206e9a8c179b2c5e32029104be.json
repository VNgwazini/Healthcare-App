{"ast":null,"code":"var _jsxFileName = \"/home/vusa/Portfolio/Healthcare-App/src/views/reports/DashboardView/RequestsReceived.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { v4 as uuid } from 'uuid';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport { Box, Button, Card, CardHeader, Chip, colors, Divider, Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, Tooltip } from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\nclass RequestsReceived extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      requests: []\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    const getData = async () => {\n      var url = `http://localhost:1337/blood-requests?supplier.id=${user.bloodBank.id}&requestor.id_ne=${user.bloodBank.id}&status_ne=canceled&_sort=createdAt:DESC&_limit=5`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.setState({\n        requests: response.data\n      });\n    };\n\n    if (user) {\n      getData();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      ...rest\n    } = this.props;\n    var data = []; // TODO: for fulfilled requests, display the IDs of the blood units that were included in the request (bloodBagIds)\n\n    for (var i in this.state.requests) {\n      var req = this.state.requests[i];\n      data.push({\n        id: uuid(),\n        requestor: {\n          name: req.requestor.name\n        },\n        type: req.bloodGroup,\n        units: req.units,\n        createdAt: req.createdAt,\n        status: req.status,\n        requestType: req.requestType\n      });\n    }\n\n    const requests = data;\n    return /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: className\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(CardHeader, {\n      title: \"Requests Received\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      minWidth: 800,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      sortDirection: \"desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, \"Requestor\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, \"Units\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    }, \"Request Type\"), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, \"Status\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, requests.map(request => /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      key: request.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, moment(request.createdAt).format('ll')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, request.requestor.name), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, request.type), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, request.units), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, request.requestType), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      color: \"primary\",\n      label: request.status,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 23\n      }\n    })))))))), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      endIcon: /*#__PURE__*/React.createElement(ArrowRightIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 22\n        }\n      }),\n      size: \"small\",\n      variant: \"text\",\n      href: \"http://localhost:3000/app/manage_requests\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"View all\")));\n  }\n\n}\n\n;\nRequestsReceived.propTypes = {\n  className: PropTypes.string\n};\nexport default RequestsReceived;","map":{"version":3,"sources":["/home/vusa/Portfolio/Healthcare-App/src/views/reports/DashboardView/RequestsReceived.js"],"names":["React","axios","moment","v4","uuid","PerfectScrollbar","PropTypes","Box","Button","Card","CardHeader","Chip","colors","Divider","Table","TableBody","TableCell","TableHead","TableRow","TableSortLabel","Tooltip","ArrowRightIcon","RequestsReceived","Component","constructor","props","state","requests","componentDidMount","token","localStorage","getItem","user","JSON","parse","getData","url","bloodBank","id","response","get","headers","Authorization","setState","data","render","className","rest","i","req","push","requestor","name","type","bloodGroup","units","createdAt","status","requestType","map","request","format","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { v4 as uuid } from 'uuid';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Chip,\n  colors,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip\n} from '@material-ui/core';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\nclass RequestsReceived extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      requests: []\n    }\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"jwt\");\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n\n    const getData = async () => {\n      var url = `http://localhost:1337/blood-requests?supplier.id=${user.bloodBank.id}&requestor.id_ne=${user.bloodBank.id}&status_ne=canceled&_sort=createdAt:DESC&_limit=5`;\n      const response = await axios.get(url, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      this.setState({\n        requests: response.data\n      });\n    }\n    if (user) {\n      getData();\n    }\n  }\n\n  render() {\n    const {className, ...rest} = this.props;\n\n    var data = [];\n    // TODO: for fulfilled requests, display the IDs of the blood units that were included in the request (bloodBagIds)\n    for (var i in this.state.requests) {\n      var req = this.state.requests[i];\n      data.push({\n        id: uuid(),\n        requestor: {\n          name: req.requestor.name\n        },\n        type: req.bloodGroup,\n        units: req.units,\n        createdAt: req.createdAt,\n        status: req.status,\n        requestType: req.requestType\n      });\n    }\n\n    const requests = data;\n\n    return (\n      <Card className={className} {...rest}>\n        <CardHeader title=\"Requests Received\" />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={800}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell sortDirection=\"desc\">Date\n                      {/* <Tooltip enterDelay={300} title=\"Sort\">\n                        <TableSortLabel active direction=\"desc\">\n                          Date\n                        </TableSortLabel>\n                      </Tooltip> */}\n                    </TableCell>\n                  <TableCell>Requestor</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Units</TableCell>\n                  <TableCell>Request Type</TableCell>\n                  <TableCell>Status</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {requests.map(request => (\n                  <TableRow hover key={request.id}>\n                    <TableCell>\n                      {moment(request.createdAt).format('ll')}\n                    </TableCell>\n                    <TableCell>{request.requestor.name}</TableCell>\n                    <TableCell>{request.type}</TableCell>\n                    <TableCell>{request.units}</TableCell>\n                    <TableCell>{request.requestType}</TableCell>\n                    <TableCell>\n                      <Chip color=\"primary\" label={request.status} size=\"small\" />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n        <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n          <Button\n            color=\"primary\"\n            endIcon={<ArrowRightIcon />}\n            size=\"small\"\n            variant=\"text\"\n            href=\"http://localhost:3000/app/manage_requests\"\n          >\n            View all\n          </Button>\n        </Box>\n      </Card>\n    );\n  }\n};\n\nRequestsReceived.propTypes = {\n  className: PropTypes.string\n};\n\nexport default RequestsReceived;\n"]},"metadata":{},"sourceType":"module"}